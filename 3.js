const loveMessages = [
    "Tu sonrisa ilumina mi d칤a",
    "Amo tu forma de ver el mundo",
    "Tu risa es mi sonido favorito",
    "Me encanta c칩mo me haces sentir",
    "Amo tu determinaci칩n y fuerza",
    "Tu bondad me inspira cada d칤a",
    "Amo c칩mo me apoyas en todo",
    "Tu inteligencia me asombra",
    "Me encanta c칩mo me haces re칤r",
    "Amo cada momento contigo",
    "Tu sentido del humor me hace re칤r m치s de lo que deber칤a",
    "Tu sentido del humor me hace re칤r y me encanta",
    "Amo c칩mo me ense침as a ver el mundo de una manera distinta",
    "Me gusta que pienses diferente (como de una forma adulta)",
    "Amo tu nariz, es una de las caracter칤sticas que me gusta",
    "Me encantan tus labios suaves y delgaditos",
    "Esto no tiene nada que ver pero t칰 eres mala conmigo a veces",
    "Me gusta c칩mo haces que cada error sea una historia divertida para contar",
    "Me encanta c칩mo tus abrazos siempre parecen ser el tama침o perfecto"
];

// Obtener la fecha actual en formato YYYY-MM-DD
const today = new Date().toISOString().split('T')[0];
let currentMessageIndex = localStorage.getItem('currentMessageIndex');
let lastShownDate = localStorage.getItem('lastShownDate');

// Inicializar el 칤ndice del mensaje si no existe en localStorage o si es un nuevo d칤a
if (!currentMessageIndex || lastShownDate !== today) {
    currentMessageIndex = Math.floor(Math.random() * loveMessages.length);
    localStorage.setItem('currentMessageIndex', currentMessageIndex);
    localStorage.setItem('lastShownDate', today);

    // Mostrar el video de confeti la primera vez que se muestra un nuevo mensaje
    showConfettiVideo();
}

// Funci칩n para mostrar el mensaje actual
function displayCurrentMessage() {
    const messageElement = document.getElementById('love-message');
    messageElement.textContent = loveMessages[currentMessageIndex];
}

// Funci칩n para manejar el clic en "Siguiente mensaje"
function nextMessage() {
    alert("Solo puedes ver un mensaje por d칤a. 춰Vuelve ma침ana para ver el pr칩ximo MI AMOR 游땢!");
}

// Actualizar el color del tema y guardar la preferencia
function updateThemeColor() {
    const color = document.getElementById('theme-color').value;
    document.querySelector('h2').style.color = color;
    document.querySelector('button').style.backgroundColor = color;
    localStorage.setItem('themeColor', color);
}

// Actualizar el fondo y guardar la preferencia
function updateBackground() {
    const background = document.getElementById('background-selector').value;
    document.body.className = background;
    localStorage.setItem('background', background);
}

// Funci칩n para mostrar el video de confeti
function showConfettiVideo() {
    const videoOverlay = document.getElementById('video-overlay');
    videoOverlay.classList.remove('hidden');

    const video = document.getElementById('confetti-video');
    video.play();

    // Ocultar el video despu칠s de que termine
    video.onended = () => {
        videoOverlay.classList.add('hidden');
    };
}

// Funci칩n para activar el Modo Oscuro basado en la hora
function activateDarkMode() {
    const hour = new Date().getHours();
    if (hour >= 19 || hour < 7) {
        document.body.classList.add('dark-mode');
    } else {
        document.body.classList.remove('dark-mode');
    }
}

// Funci칩n para ajustar el brillo del personaje en el fondo
function adjustCharacterBrightness() {
    const background = document.body.className;
    const widget = document.querySelector('.widget');

    // Ajustar el brillo para personajes espec칤ficos en modo oscuro
    if (background === 'snoopycor' || background === 'snoopyflo' || background === 'snoopylov') {
        widget.setAttribute('data-background', background);
    }
}

// Configurar eventos y restaurar preferencias guardadas
document.addEventListener('DOMContentLoaded', () => {
    displayCurrentMessage();
    document.getElementById('next-message').addEventListener('click', nextMessage);
    document.getElementById('theme-color').addEventListener('input', updateThemeColor);
    document.getElementById('background-selector').addEventListener('change', updateBackground);

    // Restaurar preferencias guardadas
    const savedThemeColor = localStorage.getItem('themeColor');
    if (savedThemeColor) {
        document.getElementById('theme-color').value = savedThemeColor;
        document.querySelector('h2').style.color = savedThemeColor;
        document.querySelector('button').style.backgroundColor = savedThemeColor;
    }

    const savedBackground = localStorage.getItem('background');
    if (savedBackground) {
        document.getElementById('background-selector').value = savedBackground;
        document.body.className = savedBackground;
    }

    // Activar el Modo Oscuro y ajustar el brillo del personaje
    activateDarkMode();
    adjustCharacterBrightness();
});
